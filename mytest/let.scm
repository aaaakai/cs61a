(define-macro (test-control bindings expr)
	`(if (null? ',(cdr bindings))
		1
		(let ,(list (car bindings)) ,expr))
)
((0 1) (2 3))
(test-control ((x 1) (2 3)) (+ x 2))
(test-control ((2 3)) (+ 1 2))

(define (list-append item-to-append pair-list)
  (if (null? pair-list)
    (list (list item-to-append))
    (if (null? (cdr pair-list))
      (list (append (list item-to-append) (car pair-list)))
      (cons (append (list item-to-append) (car pair-list))
            (list-append item-to-append (cdr pair-list)))))
)

(define (tree label branches) (cons label branches))
(define (label t) (car t))
(define (branches t) (cdr t))
(define (is-leaf t) (null? (branches t)))

; A tree for test
(define x 2)
(define-macro (infix1 expr)
  (list (car (cdr expr)) (car expr) (car (cdr (cdr expr))))
)
(infix1 (1 + 2))
(infix1 (x + 2))
(define-macro (infix2 expr)
	`(,(car (cdr expr)) 
		  (if (pair? ',(car expr))
		  	(infix2 ,(car expr))
		  	,(car expr))
		  (if (pair? ',(car (cdr (cdr expr))))
		  	(infix2 ,(car (cdr (cdr expr))))
		  	,(car (cdr (cdr expr)))))
)
(define-macro (test-infix2 expr)
	`,(car (cdr (cdr expr)))
)
(test-infix2 ((1 + 2) * (1 + 1)))
(infix2 (1 + 2))
(infix2 ((1 + 2) * (1 + 1)))
